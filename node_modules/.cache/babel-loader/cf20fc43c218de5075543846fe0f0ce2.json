{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _client = _interopRequireDefault(require(\"./amadeus/client\"));\n\nvar _pagination = _interopRequireDefault(require(\"./amadeus/client/pagination\"));\n\nvar _reference_data = _interopRequireDefault(require(\"./amadeus/namespaces/reference_data\"));\n\nvar _shopping = _interopRequireDefault(require(\"./amadeus/namespaces/shopping\"));\n\nvar _booking = _interopRequireDefault(require(\"./amadeus/namespaces/booking\"));\n\nvar _travel = _interopRequireDefault(require(\"./amadeus/namespaces/travel\"));\n\nvar _e_reputation = _interopRequireDefault(require(\"./amadeus/namespaces/e_reputation\"));\n\nvar _media = _interopRequireDefault(require(\"./amadeus/namespaces/media\"));\n\nvar _airport = _interopRequireDefault(require(\"./amadeus/namespaces/airport\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * The Amadeus client library for accessing the travel APIs.\n *\n * Initialize using your credentials:\n *\n * ```js\n * var Amadeus = require('amadeus');\n * var amadeus = new Amadeus({\n *     clientId:    'YOUR_CLIENT_ID',\n *     clientSecret: 'YOUR_CLIENT_SECRET'\n * });\n * ```\n *\n * Alternatively, initialize the library using\n * the environment variables `AMADEUS_CLIENT_ID`\n * and `AMADEUS_CLIENT_SECRET`\n *\n * ```js\n * var amadeus = new Amadeus();\n * ```\n *\n * @param {Object} params\n * @param {string} params.clientId the API key used to authenticate the API\n * @param {string} params.clientSecret the API secret used to authenticate\n *  the API\n * @param {Object} [params.logger=console] a `console`-compatible logger that\n *  accepts `log`, `error` and `debug` calls.\n * @param {string} [params.logLevel='warn'] the log level for the client,\n *  available options are `debug`, `warn`, and `silent`\n * @param {string} [params.hostname='production'] the name of the server API\n *  calls are made to (`production` or `test`)\n * @param {string} [params.host] the full domain or IP for a server to make the\n *  API clal to. Only use this if you don't want to use the provided servers\n * @param {boolean} [params.ssl=true] wether to use SSL for this API call\n * @param {number} [params.port=443] the port to make the API call to\n * @param {string} [params.customAppId=null] a custom App ID to be passed in\n * the User Agent to the server.\n * @param {string} [params.customAppVersion=null] a custom App Version number to\n * be passed in the User Agent to the server.\n * @param {Object} [params.http=https] an optional Node/HTTP(S)-compatible client\n *  that accepts a 'request()' call with an array of options.\n *\n * @property {Client} client The client for making authenticated HTTP calls\n * @property {number} version The version of this API client\n */\n\n\nvar Amadeus = /*#__PURE__*/function () {\n  function Amadeus() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Amadeus);\n\n    this.client = new _client[\"default\"](params);\n    this.version = this.client.version;\n    this.referenceData = new _reference_data[\"default\"](this.client);\n    this.shopping = new _shopping[\"default\"](this.client);\n    this.booking = new _booking[\"default\"](this.client);\n    this.travel = new _travel[\"default\"](this.client);\n    this.eReputation = new _e_reputation[\"default\"](this.client);\n    this.media = new _media[\"default\"](this.client);\n    this.airport = new _airport[\"default\"](this.client);\n    this.pagination = new _pagination[\"default\"](this.client);\n  }\n  /**\n   * The previous page for the given response. Resolves to null if the page\n   * could not be found.\n   *\n   * ```js\n   * amadeus.referenceData.locations.get({\n   *   keyword: 'LON',\n   *   subType: 'AIRPORT,CITY',\n   *   page: { offset: 2 }\n   * }).then(function(response){\n   *   console.log(response);\n   *   return amadeus.previous(response);\n   * }).then(function(previousPage){\n   *   console.log(previousPage);\n   * });\n   * ```\n   *\n   * @param response the previous response for an API call\n   * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n   */\n\n\n  _createClass(Amadeus, [{\n    key: \"previous\",\n    value: function previous(response) {\n      return this.pagination.page('previous', response);\n    }\n    /**\n     * The next page for the given response. Resolves to null if the page could\n     * not be found.\n     *\n     * ```js\n     * amadeus.referenceData.locations.get({\n     *   keyword: 'LON',\n     *   subType: 'AIRPORT,CITY'\n     * }).then(function(response){\n     *   console.log(response);\n     *   return amadeus.next(response);\n     * }).then(function(nextPage){\n     *   console.log(nextPage);\n     * });\n     * ```\n     *\n     * @param response the previous response for an API call\n     * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n     */\n\n  }, {\n    key: \"next\",\n    value: function next(response) {\n      return this.pagination.page('next', response);\n    }\n    /**\n     * The first page for the given response. Resolves to null if the page\n     * could not be found.\n     *\n     * ```js\n     * amadeus.referenceData.locations.get({\n     *   keyword: 'LON',\n     *   subType: 'AIRPORT,CITY',\n     *   page: { offset: 2 }\n     * }).then(function(response){\n     *   console.log(response);\n     *   return amadeus.first(response);\n     * }).then(function(firstPage){\n     *   console.log(firstPage);\n     * });\n     * ```\n     *\n     * @param response the previous response for an API call\n     * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n     */\n\n  }, {\n    key: \"first\",\n    value: function first(response) {\n      return this.pagination.page('first', response);\n    }\n    /**\n     * The last page for the given response. Resolves to null if the page\n     * could not be found.\n     *\n     * ```js\n     * amadeus.referenceData.locations.get({\n     *   keyword: 'LON',\n     *   subType: 'AIRPORT,CITY'\n     * }).then(function(response){\n     *   console.log(response);\n     *   return amadeus.last(response);\n     * }).then(function(lastPage){\n     *   console.log(lastPage);\n     * });\n     * ```\n     *\n     * @param response the previous response for an API call\n     * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n     */\n\n  }, {\n    key: \"last\",\n    value: function last(response) {\n      return this.pagination.page('last', response);\n    }\n  }]);\n\n  return Amadeus;\n}();\n/**\n * A handy list of location types, to be used in the locations API:\n *\n * ```js\n * amadeus.referenceData.location.get({\n *   keyword: 'lon',\n *   subType: Amadeus.location.any\n * });\n * ```\n *\n * Currently available are the types `.airport`, `.city`, and `.any`\n */\n\n\nAmadeus.location = {\n  airport: 'AIRPORT',\n  city: 'CITY',\n  any: 'AIRPORT,CITY'\n};\n/**\n * A handy list of direction types, to be used in the Flight Busiest Period API:\n *\n * ```js\n * amadeus.travel.analytics.airTraffic.busiestPeriod.get({\n *   cityCode: 'par',\n *   perdiod: 2015,\n *   direction: Amadeus.direction.arriving\n * });\n * ```\n *\n * Currently available are the types `.arriving` and `.departing`\n */\n\nAmadeus.direction = {\n  arriving: 'ARRIVING',\n  departing: 'DEPARTING'\n};\nvar _default = Amadeus;\nexports[\"default\"] = _default;\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["../src/amadeus.js"],"names":["Amadeus","params","Client","ReferenceData","Shopping","Booking","Travel","EReputation","Media","Airport","Pagination","response","airport","city","any","arriving","departing"],"mappings":"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","sourcesContent":["import Client        from './amadeus/client';\nimport Pagination    from './amadeus/client/pagination';\n\nimport ReferenceData from './amadeus/namespaces/reference_data';\nimport Shopping      from './amadeus/namespaces/shopping';\nimport Booking       from './amadeus/namespaces/booking';\nimport Travel        from './amadeus/namespaces/travel';\nimport EReputation   from './amadeus/namespaces/e_reputation';\nimport Media         from './amadeus/namespaces/media';\nimport Airport       from './amadeus/namespaces/airport';\n\n/**\n * The Amadeus client library for accessing the travel APIs.\n *\n * Initialize using your credentials:\n *\n * ```js\n * var Amadeus = require('amadeus');\n * var amadeus = new Amadeus({\n *     clientId:    'YOUR_CLIENT_ID',\n *     clientSecret: 'YOUR_CLIENT_SECRET'\n * });\n * ```\n *\n * Alternatively, initialize the library using\n * the environment variables `AMADEUS_CLIENT_ID`\n * and `AMADEUS_CLIENT_SECRET`\n *\n * ```js\n * var amadeus = new Amadeus();\n * ```\n *\n * @param {Object} params\n * @param {string} params.clientId the API key used to authenticate the API\n * @param {string} params.clientSecret the API secret used to authenticate\n *  the API\n * @param {Object} [params.logger=console] a `console`-compatible logger that\n *  accepts `log`, `error` and `debug` calls.\n * @param {string} [params.logLevel='warn'] the log level for the client,\n *  available options are `debug`, `warn`, and `silent`\n * @param {string} [params.hostname='production'] the name of the server API\n *  calls are made to (`production` or `test`)\n * @param {string} [params.host] the full domain or IP for a server to make the\n *  API clal to. Only use this if you don't want to use the provided servers\n * @param {boolean} [params.ssl=true] wether to use SSL for this API call\n * @param {number} [params.port=443] the port to make the API call to\n * @param {string} [params.customAppId=null] a custom App ID to be passed in\n * the User Agent to the server.\n * @param {string} [params.customAppVersion=null] a custom App Version number to\n * be passed in the User Agent to the server.\n * @param {Object} [params.http=https] an optional Node/HTTP(S)-compatible client\n *  that accepts a 'request()' call with an array of options.\n *\n * @property {Client} client The client for making authenticated HTTP calls\n * @property {number} version The version of this API client\n */\nclass Amadeus {\n  constructor(params = {}) {\n    this.client = new Client(params);\n    this.version = this.client.version;\n\n    this.referenceData  = new ReferenceData(this.client);\n    this.shopping       = new Shopping(this.client);\n    this.booking        = new Booking(this.client);\n    this.travel         = new Travel(this.client);\n    this.eReputation    = new EReputation(this.client);\n    this.media          = new Media(this.client);\n    this.airport        = new Airport(this.client);\n    this.pagination     = new Pagination(this.client);\n  }\n\n  /**\n   * The previous page for the given response. Resolves to null if the page\n   * could not be found.\n   *\n   * ```js\n   * amadeus.referenceData.locations.get({\n   *   keyword: 'LON',\n   *   subType: 'AIRPORT,CITY',\n   *   page: { offset: 2 }\n   * }).then(function(response){\n   *   console.log(response);\n   *   return amadeus.previous(response);\n   * }).then(function(previousPage){\n   *   console.log(previousPage);\n   * });\n   * ```\n   *\n   * @param response the previous response for an API call\n   * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n   */\n  previous(response) { return this.pagination.page('previous', response); }\n\n  /**\n   * The next page for the given response. Resolves to null if the page could\n   * not be found.\n   *\n   * ```js\n   * amadeus.referenceData.locations.get({\n   *   keyword: 'LON',\n   *   subType: 'AIRPORT,CITY'\n   * }).then(function(response){\n   *   console.log(response);\n   *   return amadeus.next(response);\n   * }).then(function(nextPage){\n   *   console.log(nextPage);\n   * });\n   * ```\n   *\n   * @param response the previous response for an API call\n   * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n   */\n  next(response)     { return this.pagination.page('next', response); }\n\n  /**\n   * The first page for the given response. Resolves to null if the page\n   * could not be found.\n   *\n   * ```js\n   * amadeus.referenceData.locations.get({\n   *   keyword: 'LON',\n   *   subType: 'AIRPORT,CITY',\n   *   page: { offset: 2 }\n   * }).then(function(response){\n   *   console.log(response);\n   *   return amadeus.first(response);\n   * }).then(function(firstPage){\n   *   console.log(firstPage);\n   * });\n   * ```\n   *\n   * @param response the previous response for an API call\n   * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n   */\n  first(response)    { return this.pagination.page('first', response); }\n\n  /**\n   * The last page for the given response. Resolves to null if the page\n   * could not be found.\n   *\n   * ```js\n   * amadeus.referenceData.locations.get({\n   *   keyword: 'LON',\n   *   subType: 'AIRPORT,CITY'\n   * }).then(function(response){\n   *   console.log(response);\n   *   return amadeus.last(response);\n   * }).then(function(lastPage){\n   *   console.log(lastPage);\n   * });\n   * ```\n   *\n   * @param response the previous response for an API call\n   * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n   */\n  last(response)     { return this.pagination.page('last', response); }\n}\n\n\n/**\n * A handy list of location types, to be used in the locations API:\n *\n * ```js\n * amadeus.referenceData.location.get({\n *   keyword: 'lon',\n *   subType: Amadeus.location.any\n * });\n * ```\n *\n * Currently available are the types `.airport`, `.city`, and `.any`\n */\nAmadeus.location = {\n  airport: 'AIRPORT',\n  city: 'CITY',\n  any: 'AIRPORT,CITY'\n};\n\n/**\n * A handy list of direction types, to be used in the Flight Busiest Period API:\n *\n * ```js\n * amadeus.travel.analytics.airTraffic.busiestPeriod.get({\n *   cityCode: 'par',\n *   perdiod: 2015,\n *   direction: Amadeus.direction.arriving\n * });\n * ```\n *\n * Currently available are the types `.arriving` and `.departing`\n */\n\nAmadeus.direction = {\n  arriving: 'ARRIVING',\n  departing: 'DEPARTING'\n};\n\nexport default Amadeus;\n"]},"metadata":{},"sourceType":"script"}