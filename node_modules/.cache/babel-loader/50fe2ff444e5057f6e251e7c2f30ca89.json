{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _events = _interopRequireDefault(require(\"events\"));\n\nvar _bluebird = _interopRequireDefault(require(\"bluebird\"));\n\nvar _util = _interopRequireDefault(require(\"util\"));\n\nvar _access_token = _interopRequireDefault(require(\"./client/access_token\"));\n\nvar _listener = _interopRequireDefault(require(\"./client/listener\"));\n\nvar _request = _interopRequireDefault(require(\"./client/request\"));\n\nvar _validator = _interopRequireDefault(require(\"./client/validator\"));\n\nvar _package = _interopRequireDefault(require(\"../../package.json\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * A convenient wrapper around the API, allowing for generic, authenticated and\n * unauthenticated API calls without having to manage the serialization,\n * desrialization, and authentication.\n *\n * Generally you do not need to use this object directly. Instead it is used\n * indirectly by the various namespaced methods for every API call.\n *\n * For example, the following are the semantically the same.\n *\n * ```js\n * amadeus.client.get('/v1/reference-data/urls/checkin-links', params);\n * amadeus.amadeus.reference_data.urls.checkin_links.get(params);\n * ```\n *\n * @param {Object} options a list of options. See {@link Amadeus} .\n * @property {string} clientId the API key used to authenticate the API\n * @property {string} clientSecret the API secret used to authenticate\n *  the API\n * @property {Object} logger the `console`-compatible logger used to debug calls\n * @property {string} logLevel the log level for the client, available options\n *  are `debug`, `warn`, and `silent`. Defaults to 'silent'\n * @property {string} host the hostname of the server API calls are made to\n * @property {number} port the port the server API calls are made to\n * @property {boolean} ssl wether an SSL request is made to the server\n * @property {string} customAppId the custom App ID to be passed in the User\n *  Agent to the server\n * @property {string} customAppVersion the custom App Version number to be\n *  passed in the User Agent to the server\n * @property {Object} http the Node/HTTP(S)-compatible client used to make\n *  requests\n * @property {number} version The version of this API client\n */\n\n\nvar Client = /*#__PURE__*/function () {\n  function Client() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Client);\n\n    new _validator[\"default\"]().validateAndInitialize(this, options);\n    this.accessToken = new _access_token[\"default\"](this);\n    this.version = _package[\"default\"].version;\n  }\n  /**\n   * Make an authenticated GET API call.\n   *\n   * ```js\n   * amadeus.client.get('/v2/foo/bar', { some: 'data' });\n   * ```\n   * @param {string} path the full path of the API endpoint\n   * @param {Object} [params={}] the query string parameters\n   * @return {Promise.<Response,ResponseError>} a Promise\n   */\n\n\n  _createClass(Client, [{\n    key: \"get\",\n    value: function get(path) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('GET', path, params);\n    }\n    /**\n     * Make an authenticated POST API call.\n     *\n     * ```js\n     * amadeus.client.post('/v2/foo/bar', { some: 'data' });\n     * ```\n     * @param {string} path the full path of the API endpoint\n     * @param {Object} [params={}] the POST parameters\n     * @return {Promise.<Response,ResponseError>} a Promise\n     */\n\n  }, {\n    key: \"post\",\n    value: function post(path) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('POST', path, params);\n    }\n    /**\n     * Make an authenticated DELETE API call.\n     *\n     * ```js\n     * amadeus.client.delete('/v2/foo/bar', { some: 'data' });\n     * ```\n     * @param {string} path the full path of the API endpoint\n     * @param {Object} [params={}] the query string parameters\n     * @return {Promise.<Response,ResponseError>} a Promise\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(path) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('DELETE', path, params);\n    } // PROTECTED\n\n    /**\n     * Make an authenticated API call.\n     *\n     * ```js\n     * amadeus.client.call('GET', '/v2/foo/bar', { some: 'data' });\n     * ```\n     * @param {string} verb the HTTP method, for example `GET` or `POST`\n     * @param {string} path the full path of the API endpoint\n     * @param {Object} [params={}] the POST parameters\n     * @return {Promise.<Response,ResponseError>} a Promise\n     * @protected\n     */\n\n  }, {\n    key: \"request\",\n    value: function request(verb, path) {\n      var _this = this;\n\n      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.accessToken.bearerToken(this).then(function (bearerToken) {\n        return _this.unauthenticatedRequest(verb, path, params, bearerToken);\n      });\n    } // PRIVATE\n\n    /**\n     * Make any kind of API call, authenticated or not\n     *\n     * Used by the .get, .post methods to make API calls.\n     *\n     * Sets up a new Promise and then excutes the API call, triggering the Promise\n     * to be called when the API call fails or succeeds.\n     *\n     * @param {string} verb the HTTP method, for example `GET` or `POST`\n     * @param {string} path the full path of the API endpoint\n     * @param {Object} params the parameters to pass in the query or body\n     * @param {string} [bearerToken=null] the BearerToken as generated by the\n     *  AccessToken class\n     * @return {Promise.<Response,ResponseError>} a Promise\n     * @private\n     */\n\n  }, {\n    key: \"unauthenticatedRequest\",\n    value: function unauthenticatedRequest(verb, path, params) {\n      var bearerToken = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var request = this.buildRequest(verb, path, params, bearerToken);\n      this.log(request);\n      var emitter = new _events[\"default\"]();\n      var promise = this.buildPromise(emitter);\n      this.execute(request, emitter);\n      return promise;\n    }\n    /**\n     * Actually executes the API call.\n     *\n     * @param {Request} request the request to execute\n     * @param {EventEmitter} emitter the event emitter to notify of changes\n     * @private\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(request, emitter) {\n      var http_request = this.http.request(request.options());\n      var listener = new _listener[\"default\"](request, emitter, this);\n      http_request.on('response', listener.onResponse.bind(listener));\n      http_request.on('error', listener.onError.bind(listener));\n      http_request.write(request.body());\n      http_request.end();\n    }\n    /**\n     * Builds a Request object to be used in the API call\n     *\n     * @param {string} verb the HTTP method, for example `GET` or `POST`\n     * @param {string} path the full path of the API endpoint\n     * @param {Object} params the parameters to pass in the query or body\n     * @param {string} [bearerToken=null] the BearerToken as generated by the\n     *  AccessToken class\n     * @return {Request}\n     * @private\n     */\n\n  }, {\n    key: \"buildRequest\",\n    value: function buildRequest(verb, path, params, bearerToken) {\n      return new _request[\"default\"]({\n        host: this.host,\n        verb: verb,\n        path: path,\n        params: params,\n        bearerToken: bearerToken,\n        clientVersion: this.version,\n        languageVersion: process.version,\n        appId: this.customAppId,\n        appVersion: this.customAppVersion,\n        port: this.port,\n        ssl: this.ssl\n      });\n    }\n    /**\n     * Builds a Bluebird Promise to be returned to the API user\n     *\n     * @param  {type} emitter the event emitter to notify of changes\n     * @return {Promise} a Bluebird promise\n     * @private\n     */\n\n  }, {\n    key: \"buildPromise\",\n    value: function buildPromise(emitter) {\n      return new _bluebird[\"default\"](function (resolve, reject) {\n        emitter.on('resolve', function (response) {\n          return resolve(response);\n        });\n        emitter.on('reject', function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /**\n     * Logs the request, when in debug mode\n     *\n     * @param  {Request} request the request object to log\n     * @private\n     */\n\n  }, {\n    key: \"log\",\n    value: function log(request) {\n      /* istanbul ignore next */\n      if (this.debug()) {\n        this.logger.log(_util[\"default\"].inspect(request, false, null));\n      }\n    }\n    /**\n     * Determines if this client is in debug mode\n     *\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      return this.logLevel == 'debug';\n    }\n    /**\n     * Determines if this client is in warn or debug mode\n     *\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      return this.logLevel == 'warn' || this.debug();\n    }\n  }]);\n\n  return Client;\n}();\n\nvar _default = Client;\nexports[\"default\"] = _default;\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["../../src/amadeus/client.js"],"names":["Client","options","Validator","AccessToken","pkg","path","params","verb","bearerToken","request","emitter","EventEmitter","promise","http_request","listener","Listener","Request","host","clientVersion","languageVersion","process","appId","appVersion","port","ssl","Promise","resolve","reject","util"],"mappings":";;;;;;;AAAA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAEA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiCMA,M;AACJ,WAAA,MAAA,GAA0B;AAAA,QAAdC,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,CAAA;;AACxB,QAAIC,UAAAA,CAAJ,SAAIA,CAAJ,GAAA,qBAAA,CAAA,IAAA,EAAA,OAAA;AACA,SAAA,WAAA,GAAmB,IAAIC,aAAAA,CAAJ,SAAIA,CAAJ,CAAnB,IAAmB,CAAnB;AACA,SAAA,OAAA,GAAeC,QAAAA,CAAAA,SAAAA,CAAAA,CAAf,OAAA;AACD;AAED;;;;;;;;;;;;;;wBAUIC,I,EAAmB;AAAA,UAAbC,MAAa,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AACrB,aAAO,KAAA,OAAA,CAAA,KAAA,EAAA,IAAA,EAAP,MAAO,CAAP;AACD;AAED;;;;;;;;;;;;;yBAUKD,I,EAAmB;AAAA,UAAbC,MAAa,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AACtB,aAAO,KAAA,OAAA,CAAA,MAAA,EAAA,IAAA,EAAP,MAAO,CAAP;AACD;AAED;;;;;;;;;;;;;4BAUOD,I,EAAmB;AAAA,UAAbC,MAAa,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AACxB,aAAO,KAAA,OAAA,CAAA,QAAA,EAAA,IAAA,EAAP,MAAO,CAAP;MAGF;;AAEA;;;;;;;;;;;;;;;4BAYQC,I,EAAMF,I,EAAmB;AAAA,UAAA,KAAA,GAAA,IAAA;;AAAA,UAAbC,MAAa,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAC/B,aAAO,KAAA,WAAA,CAAA,WAAA,CAAA,IAAA,EAAA,IAAA,CAAwC,UAAA,WAAA,EAAiB;AAC9D,eAAO,KAAI,CAAJ,sBAAA,CAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAP,WAAO,CAAP;AADF,OAAO,CAAP;MAKF;;AAEA;;;;;;;;;;;;;;;;;;;2CAgBuBC,I,EAAMF,I,EAAMC,M,EAA4B;AAAA,UAApBE,WAAoB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAN,IAAM;AAC7D,UAAIC,OAAO,GAAG,KAAA,YAAA,CAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAd,WAAc,CAAd;AACA,WAAA,GAAA,CAAA,OAAA;AACA,UAAIC,OAAO,GAAG,IAAIC,OAAAA,CAAlB,SAAkBA,CAAJ,EAAd;AACA,UAAIC,OAAO,GAAG,KAAA,YAAA,CAAd,OAAc,CAAd;AAEA,WAAA,OAAA,CAAA,OAAA,EAAA,OAAA;AACA,aAAA,OAAA;AACD;AAED;;;;;;;;;;4BAOQH,O,EAASC,O,EAAS;AACxB,UAAIG,YAAY,GAAG,KAAA,IAAA,CAAA,OAAA,CAAkBJ,OAAO,CAA5C,OAAqCA,EAAlB,CAAnB;AACA,UAAIK,QAAQ,GAAG,IAAIC,SAAAA,CAAJ,SAAIA,CAAJ,CAAA,OAAA,EAAA,OAAA,EAAf,IAAe,CAAf;AACAF,MAAAA,YAAY,CAAZA,EAAAA,CAAAA,UAAAA,EAA4BC,QAAQ,CAARA,UAAAA,CAAAA,IAAAA,CAA5BD,QAA4BC,CAA5BD;AACAA,MAAAA,YAAY,CAAZA,EAAAA,CAAAA,OAAAA,EAA4BC,QAAQ,CAARA,OAAAA,CAAAA,IAAAA,CAA5BD,QAA4BC,CAA5BD;AACAA,MAAAA,YAAY,CAAZA,KAAAA,CAAmBJ,OAAO,CAA1BI,IAAmBJ,EAAnBI;AACAA,MAAAA,YAAY,CAAZA,GAAAA;AACD;AAED;;;;;;;;;;;;;;iCAWaN,I,EAAMF,I,EAAMC,M,EAAQE,W,EAAa;AAC5C,aAAO,IAAIQ,QAAAA,CAAJ,SAAIA,CAAJ,CAAY;AACjBC,QAAAA,IAAI,EAAE,KADW,IAAA;AAEjBV,QAAAA,IAAI,EAFa,IAAA;AAGjBF,QAAAA,IAAI,EAHa,IAAA;AAIjBC,QAAAA,MAAM,EAJW,MAAA;AAKjBE,QAAAA,WAAW,EALM,WAAA;AAMjBU,QAAAA,aAAa,EAAE,KANE,OAAA;AAOjBC,QAAAA,eAAe,EAAEC,OAAO,CAPP,OAAA;AAQjBC,QAAAA,KAAK,EAAE,KARU,WAAA;AASjBC,QAAAA,UAAU,EAAE,KATK,gBAAA;AAUjBC,QAAAA,IAAI,EAAE,KAVW,IAAA;AAWjBC,QAAAA,GAAG,EAAE,KAAKA;AAXO,OAAZ,CAAP;AAaD;AAED;;;;;;;;;;iCAOad,O,EAAS;AACpB,aAAO,IAAIe,SAAAA,CAAJ,SAAIA,CAAJ,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtCf,QAAAA,OAAO,CAAPA,EAAAA,CAAAA,SAAAA,EAAsB,UAAA,QAAA,EAAQ;AAAA,iBAAIgB,OAAO,CAAX,QAAW,CAAX;AAA9BhB,SAAAA;AACAA,QAAAA,OAAO,CAAPA,EAAAA,CAAAA,QAAAA,EAAqB,UAAA,KAAA,EAAK;AAAA,iBAAIiB,MAAM,CAAV,KAAU,CAAV;AAA1BjB,SAAAA;AAFF,OAAO,CAAP;AAID;AAGD;;;;;;;;;wBAMID,O,EAAS;AACX;AACA,UAAG,KAAH,KAAG,EAAH,EAAiB;AAAE,aAAA,MAAA,CAAA,GAAA,CAAgBmB,KAAAA,CAAAA,SAAAA,CAAAA,CAAAA,OAAAA,CAAAA,OAAAA,EAAAA,KAAAA,EAAhB,IAAgBA,CAAhB;AAAsD;AAC1E;AAED;;;;;;;;4BAKQ;AACN,aAAO,KAAA,QAAA,IAAP,OAAA;AACD;AAED;;;;;;;;2BAKO;AACL,aAAO,KAAA,QAAA,IAAA,MAAA,IAA2B,KAAlC,KAAkC,EAAlC;AACD;;;;;;eAGY5B,M","sourcesContent":["import EventEmitter from 'events';\nimport Promise      from 'bluebird';\nimport util         from 'util';\n\nimport AccessToken from './client/access_token';\nimport Listener    from './client/listener';\nimport Request     from './client/request';\nimport Validator   from './client/validator';\n\nimport pkg         from '../../package.json';\n\n/**\n * A convenient wrapper around the API, allowing for generic, authenticated and\n * unauthenticated API calls without having to manage the serialization,\n * desrialization, and authentication.\n *\n * Generally you do not need to use this object directly. Instead it is used\n * indirectly by the various namespaced methods for every API call.\n *\n * For example, the following are the semantically the same.\n *\n * ```js\n * amadeus.client.get('/v1/reference-data/urls/checkin-links', params);\n * amadeus.amadeus.reference_data.urls.checkin_links.get(params);\n * ```\n *\n * @param {Object} options a list of options. See {@link Amadeus} .\n * @property {string} clientId the API key used to authenticate the API\n * @property {string} clientSecret the API secret used to authenticate\n *  the API\n * @property {Object} logger the `console`-compatible logger used to debug calls\n * @property {string} logLevel the log level for the client, available options\n *  are `debug`, `warn`, and `silent`. Defaults to 'silent'\n * @property {string} host the hostname of the server API calls are made to\n * @property {number} port the port the server API calls are made to\n * @property {boolean} ssl wether an SSL request is made to the server\n * @property {string} customAppId the custom App ID to be passed in the User\n *  Agent to the server\n * @property {string} customAppVersion the custom App Version number to be\n *  passed in the User Agent to the server\n * @property {Object} http the Node/HTTP(S)-compatible client used to make\n *  requests\n * @property {number} version The version of this API client\n */\nclass Client {\n  constructor(options = {}) {\n    new Validator().validateAndInitialize(this, options);\n    this.accessToken = new AccessToken(this);\n    this.version = pkg.version;\n  }\n\n  /**\n   * Make an authenticated GET API call.\n   *\n   * ```js\n   * amadeus.client.get('/v2/foo/bar', { some: 'data' });\n   * ```\n   * @param {string} path the full path of the API endpoint\n   * @param {Object} [params={}] the query string parameters\n   * @return {Promise.<Response,ResponseError>} a Promise\n   */\n  get(path, params = {}) {\n    return this.request('GET', path, params);\n  }\n\n  /**\n   * Make an authenticated POST API call.\n   *\n   * ```js\n   * amadeus.client.post('/v2/foo/bar', { some: 'data' });\n   * ```\n   * @param {string} path the full path of the API endpoint\n   * @param {Object} [params={}] the POST parameters\n   * @return {Promise.<Response,ResponseError>} a Promise\n   */\n  post(path, params = {}) {\n    return this.request('POST', path, params);\n  }\n\n  /**\n   * Make an authenticated DELETE API call.\n   *\n   * ```js\n   * amadeus.client.delete('/v2/foo/bar', { some: 'data' });\n   * ```\n   * @param {string} path the full path of the API endpoint\n   * @param {Object} [params={}] the query string parameters\n   * @return {Promise.<Response,ResponseError>} a Promise\n   */\n  delete(path, params = {}) {\n    return this.request('DELETE', path, params);\n  }\n\n  // PROTECTED\n\n  /**\n   * Make an authenticated API call.\n   *\n   * ```js\n   * amadeus.client.call('GET', '/v2/foo/bar', { some: 'data' });\n   * ```\n   * @param {string} verb the HTTP method, for example `GET` or `POST`\n   * @param {string} path the full path of the API endpoint\n   * @param {Object} [params={}] the POST parameters\n   * @return {Promise.<Response,ResponseError>} a Promise\n   * @protected\n   */\n  request(verb, path, params = {}) {\n    return this.accessToken.bearerToken(this).then((bearerToken) => {\n      return this.unauthenticatedRequest(verb, path, params, bearerToken);\n    });\n  }\n\n  // PRIVATE\n\n  /**\n   * Make any kind of API call, authenticated or not\n   *\n   * Used by the .get, .post methods to make API calls.\n   *\n   * Sets up a new Promise and then excutes the API call, triggering the Promise\n   * to be called when the API call fails or succeeds.\n   *\n   * @param {string} verb the HTTP method, for example `GET` or `POST`\n   * @param {string} path the full path of the API endpoint\n   * @param {Object} params the parameters to pass in the query or body\n   * @param {string} [bearerToken=null] the BearerToken as generated by the\n   *  AccessToken class\n   * @return {Promise.<Response,ResponseError>} a Promise\n   * @private\n   */\n  unauthenticatedRequest(verb, path, params, bearerToken = null) {\n    let request = this.buildRequest(verb, path, params, bearerToken);\n    this.log(request);\n    let emitter = new EventEmitter();\n    let promise = this.buildPromise(emitter);\n\n    this.execute(request, emitter);\n    return promise;\n  }\n\n  /**\n   * Actually executes the API call.\n   *\n   * @param {Request} request the request to execute\n   * @param {EventEmitter} emitter the event emitter to notify of changes\n   * @private\n   */\n  execute(request, emitter) {\n    let http_request = this.http.request(request.options());\n    let listener = new Listener(request, emitter, this);\n    http_request.on('response', listener.onResponse.bind(listener));\n    http_request.on('error',    listener.onError.bind(listener));\n    http_request.write(request.body());\n    http_request.end();\n  }\n\n  /**\n   * Builds a Request object to be used in the API call\n   *\n   * @param {string} verb the HTTP method, for example `GET` or `POST`\n   * @param {string} path the full path of the API endpoint\n   * @param {Object} params the parameters to pass in the query or body\n   * @param {string} [bearerToken=null] the BearerToken as generated by the\n   *  AccessToken class\n   * @return {Request}\n   * @private\n   */\n  buildRequest(verb, path, params, bearerToken) {\n    return new Request({\n      host: this.host,\n      verb: verb,\n      path: path,\n      params: params,\n      bearerToken: bearerToken,\n      clientVersion: this.version,\n      languageVersion: process.version,\n      appId: this.customAppId,\n      appVersion: this.customAppVersion,\n      port: this.port,\n      ssl: this.ssl\n    });\n  }\n\n  /**\n   * Builds a Bluebird Promise to be returned to the API user\n   *\n   * @param  {type} emitter the event emitter to notify of changes\n   * @return {Promise} a Bluebird promise\n   * @private\n   */\n  buildPromise(emitter) {\n    return new Promise((resolve, reject) => {\n      emitter.on('resolve', response => resolve(response));\n      emitter.on('reject', error => reject(error));\n    });\n  }\n\n\n  /**\n   * Logs the request, when in debug mode\n   *\n   * @param  {Request} request the request object to log\n   * @private\n   */\n  log(request) {\n    /* istanbul ignore next */\n    if(this.debug()) { this.logger.log(util.inspect(request, false, null)); }\n  }\n\n  /**\n   * Determines if this client is in debug mode\n   *\n   * @return {boolean}\n   */\n  debug() {\n    return this.logLevel == 'debug';\n  }\n\n  /**\n   * Determines if this client is in warn or debug mode\n   *\n   * @return {boolean}\n   */\n  warn() {\n    return this.logLevel == 'warn' || this.debug();\n  }\n}\n\nexport default Client;\n"]},"metadata":{},"sourceType":"script"}