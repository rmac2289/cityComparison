{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * A helper library for handling pagination.\n *\n * @param {Client} client the client to make the API calls against\n * @protected\n */\n\n\nvar Pagination = /*#__PURE__*/function () {\n  function Pagination(client) {\n    _classCallCheck(this, Pagination);\n\n    this.client = client;\n  }\n  /**\n   * Fetch the page for the given page name, and make the next API call based on\n   * the previous request made.\n   *\n   * @param  {type} pageName the name of the page to fetch, should be available\n   *    as a link in the meta links in the response\n   * @param  {type} response the response containing the links to the next pages,\n   *   and the request used to make the previous call\n   * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n   * @protected\n   */\n\n\n  _createClass(Pagination, [{\n    key: \"page\",\n    value: function page(pageName, response) {\n      var pageNumber = this.pageNumber(response, pageName);\n\n      if (pageNumber) {\n        return this.call(response.request, pageNumber);\n      } else {\n        return this.nullPromise();\n      }\n    } // PRIVATE\n\n    /**\n     * Makes a new call for the new page number\n     *\n     * @param  {type} request    the request used to make the previous call\n     * @param  {type} pageNumber the page number to fetch\n     * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n     * @private\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(request, pageNumber) {\n      var params = request.params || {};\n      params['page'] = params['page'] || {};\n      params['page']['offset'] = pageNumber;\n      return this.client.request(request.verb, request.path, params);\n    }\n    /**\n     * Tries to determine the page number from the page name. If not present, it\n     * just returns null\n     *\n     * @param  {type} response the response containing the links to the next pages\n     * @param  {type} pageName the name of the page to fetch\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: \"pageNumber\",\n    value: function pageNumber(response, pageName) {\n      try {\n        return response.result['meta']['links'][pageName].split('=').pop();\n      } catch (TypeError) {\n        return null;\n      }\n    }\n    /**\n     * Returns a Promise that always resolves to null\n     *\n     * @return {Promise} a Promise that always resolves to null\n     * @private\n     */\n\n  }, {\n    key: \"nullPromise\",\n    value: function nullPromise() {\n      return new Promise(function (resolve) {\n        resolve(null);\n      });\n    }\n  }]);\n\n  return Pagination;\n}();\n\nvar _default = Pagination;\nexports[\"default\"] = _default;\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["../../../src/amadeus/client/pagination.js"],"names":["Pagination","pageName","response","pageNumber","request","params","resolve"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;IAMMA,U;AACJ,WAAA,UAAA,CAAA,MAAA,EAAoB;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA;;AAClB,SAAA,MAAA,GAAA,MAAA;AACD;AAED;;;;;;;;;;;;;;;yBAWKC,Q,EAAUC,Q,EAAU;AACvB,UAAIC,UAAU,GAAG,KAAA,UAAA,CAAA,QAAA,EAAjB,QAAiB,CAAjB;;AAEA,UAAA,UAAA,EAAgB;AACd,eAAO,KAAA,IAAA,CAAUD,QAAQ,CAAlB,OAAA,EAAP,UAAO,CAAP;AADF,OAAA,MAEO;AACL,eAAO,KAAP,WAAO,EAAP;AACD;MAGH;;AAGA;;;;;;;;;;;yBAQKE,O,EAASD,U,EAAY;AACxB,UAAIE,MAAM,GAAGD,OAAO,CAAPA,MAAAA,IAAb,EAAA;AACAC,MAAAA,MAAM,CAANA,MAAM,CAANA,GAAiBA,MAAM,CAANA,MAAM,CAANA,IAAjBA,EAAAA;AACAA,MAAAA,MAAM,CAANA,MAAM,CAANA,CAAAA,QAAAA,IAAAA,UAAAA;AAEA,aAAO,KAAA,MAAA,CAAA,OAAA,CACLD,OAAO,CADF,IAAA,EAELA,OAAO,CAFF,IAAA,EAAP,MAAO,CAAP;AAKD;AAED;;;;;;;;;;;;+BASWF,Q,EAAUD,Q,EAAU;AAC7B,UAAI;AACF,eAAOC,QAAQ,CAARA,MAAAA,CAAAA,MAAAA,EAAAA,OAAAA,EAAAA,QAAAA,EAAAA,KAAAA,CAAAA,GAAAA,EAAP,GAAOA,EAAP;AADF,OAAA,CAEE,OAAA,SAAA,EAAkB;AAClB,eAAA,IAAA;AACD;AACF;AAED;;;;;;;;;kCAMc;AACZ,aAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAkB;AAAEI,QAAAA,OAAO,CAAPA,IAAO,CAAPA;AAAvC,OAAO,CAAP;AACD;;;;;;eAGYN,U","sourcesContent":["/**\n * A helper library for handling pagination.\n *\n * @param {Client} client the client to make the API calls against\n * @protected\n */\nclass Pagination {\n  constructor(client) {\n    this.client = client;\n  }\n\n  /**\n   * Fetch the page for the given page name, and make the next API call based on\n   * the previous request made.\n   *\n   * @param  {type} pageName the name of the page to fetch, should be available\n   *    as a link in the meta links in the response\n   * @param  {type} response the response containing the links to the next pages,\n   *   and the request used to make the previous call\n   * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n   * @protected\n   */\n  page(pageName, response) {\n    let pageNumber = this.pageNumber(response, pageName);\n\n    if (pageNumber) {\n      return this.call(response.request, pageNumber);\n    } else {\n      return this.nullPromise();\n    }\n  }\n\n  // PRIVATE\n\n\n  /**\n   * Makes a new call for the new page number\n   *\n   * @param  {type} request    the request used to make the previous call\n   * @param  {type} pageNumber the page number to fetch\n   * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n   * @private\n   */\n  call(request, pageNumber) {\n    let params = request.params || {};\n    params['page'] = params['page'] || {};\n    params['page']['offset'] = pageNumber;\n\n    return this.client.request(\n      request.verb,\n      request.path,\n      params\n    );\n  }\n\n  /**\n   * Tries to determine the page number from the page name. If not present, it\n   * just returns null\n   *\n   * @param  {type} response the response containing the links to the next pages\n   * @param  {type} pageName the name of the page to fetch\n   * @return {number}\n   * @private\n   */\n  pageNumber(response, pageName) {\n    try {\n      return response.result['meta']['links'][pageName].split('=').pop();\n    } catch (TypeError) {\n      return null;\n    }\n  }\n\n  /**\n   * Returns a Promise that always resolves to null\n   *\n   * @return {Promise} a Promise that always resolves to null\n   * @private\n   */\n  nullPromise() {\n    return new Promise(function(resolve) { resolve(null); });\n  }\n}\n\nexport default Pagination;\n"]},"metadata":{},"sourceType":"script"}