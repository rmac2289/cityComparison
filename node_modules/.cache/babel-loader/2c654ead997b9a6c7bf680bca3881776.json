{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _result = _interopRequireDefault(require(\"./trip_parser_jobs/result\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * A namespaced client for the\n * `/v2/travel/trip-parser-jobs` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.travel.tripParserJobs;\n * ```\n *\n * @param {Client} client\n * @property {Result} result\n */\n\n\nvar TripParserJobs = /*#__PURE__*/function () {\n  function TripParserJobs(client, jobId) {\n    _classCallCheck(this, TripParserJobs);\n\n    this.client = client;\n    this._jobId = jobId;\n    this.result = new _result[\"default\"](client, jobId);\n  }\n  /**\n   * To get the parsing status and the link to the result in case of successful parsing.\n   *\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * To get the parsing status and the link to the result for job with ID 'XXX'\n   *\n   * ```js\n   * amadeus.travel.tripParserJobs('XXX').get();\n   * ```\n   */\n\n\n  _createClass(TripParserJobs, [{\n    key: \"get\",\n    value: function get() {\n      if (this._jobId) return this.client.get('/v2/travel/trip-parser-jobs/' + this._jobId);else throw new Error('MISSING_REQUIRED_PARAMETER');\n    }\n    /**\n     * To send the request for the parsing with the booking details and input parameters.\n     *\n     * @param {Object} params\n     * @return {Promise.<Response,ResponseError>} a Promise\n     *\n     * To get the parsing status and the link to the result for job with ID 'XXX'\n     *\n     * ```js\n     * amadeus.travel.tripParserJobs().post({\n     *  'type': 'trip-parser-job',\n     *  'content': amadeus.travel.tripParserJobs().convertToJson(\"fileContentsInUTF8Format\");\n     * });\n     * ```\n     */\n\n  }, {\n    key: \"post\",\n    value: function post() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.post('/v2/travel/trip-parser-jobs', params);\n    }\n    /**\n     * Helper method to convert file contents in UTF-8 encoded string\n     * into Base64 encoded string\n     */\n\n  }, {\n    key: \"convertToJson\",\n    value: function convertToJson(fileContentsInUTF8Format) {\n      return new Buffer(fileContentsInUTF8Format).toString('base64');\n    }\n  }]);\n\n  return TripParserJobs;\n}();\n\nvar _default = TripParserJobs;\nexports[\"default\"] = _default;\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["../../../../src/amadeus/namespaces/travel/trip_parser_jobs.js"],"names":["TripParserJobs","Result","params","fileContentsInUTF8Format"],"mappings":";;;;;;;AAAA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,2BAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;IAcMA,c;AACJ,WAAA,cAAA,CAAA,MAAA,EAAA,KAAA,EAA2B;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,CAAA;;AACzB,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,MAAA,GAAA,KAAA;AACA,SAAA,MAAA,GAAc,IAAIC,OAAAA,CAAJ,SAAIA,CAAJ,CAAA,MAAA,EAAd,KAAc,CAAd;AACD;AAED;;;;;;;;;;;;;;;0BAWM;AACJ,UAAI,KAAJ,MAAA,EACE,OAAO,KAAA,MAAA,CAAA,GAAA,CAAgB,iCAAiC,KAD1D,MACS,CAAP,CADF,KAGE,MAAM,IAAA,KAAA,CAAN,4BAAM,CAAN;AACH;AAED;;;;;;;;;;;;;;;;;;2BAekB;AAAA,UAAbC,MAAa,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAChB,aAAO,KAAA,MAAA,CAAA,IAAA,CAAA,6BAAA,EAAP,MAAO,CAAP;AACD;AAED;;;;;;;kCAIcC,wB,EAA0B;AACtC,aAAQ,IAAA,MAAA,CAAD,wBAAC,EAAD,QAAC,CAAR,QAAQ,CAAR;AACD;;;;;;eAGYH,c","sourcesContent":["import Result from './trip_parser_jobs/result';\n\n/**\n * A namespaced client for the\n * `/v2/travel/trip-parser-jobs` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.travel.tripParserJobs;\n * ```\n *\n * @param {Client} client\n * @property {Result} result\n */\nclass TripParserJobs {\n  constructor(client, jobId) {\n    this.client = client;\n    this._jobId = jobId;\n    this.result = new Result(client, jobId);\n  }\n\n  /**\n   * To get the parsing status and the link to the result in case of successful parsing.\n   *\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * To get the parsing status and the link to the result for job with ID 'XXX'\n   *\n   * ```js\n   * amadeus.travel.tripParserJobs('XXX').get();\n   * ```\n   */\n  get() {\n    if (this._jobId)\n      return this.client.get('/v2/travel/trip-parser-jobs/' + this._jobId);\n    else\n      throw new Error('MISSING_REQUIRED_PARAMETER');\n  }\n\n  /**\n   * To send the request for the parsing with the booking details and input parameters.\n   *\n   * @param {Object} params\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * To get the parsing status and the link to the result for job with ID 'XXX'\n   *\n   * ```js\n   * amadeus.travel.tripParserJobs().post({\n   *  'type': 'trip-parser-job',\n   *  'content': amadeus.travel.tripParserJobs().convertToJson(\"fileContentsInUTF8Format\");\n   * });\n   * ```\n   */\n  post(params = {}) {\n    return this.client.post('/v2/travel/trip-parser-jobs', params);\n  }\n\n  /**\n   * Helper method to convert file contents in UTF-8 encoded string\n   * into Base64 encoded string\n   */\n  convertToJson(fileContentsInUTF8Format) {\n    return (new Buffer(fileContentsInUTF8Format)).toString('base64');\n  }\n}\n\nexport default TripParserJobs;"]},"metadata":{},"sourceType":"script"}