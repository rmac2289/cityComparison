{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _qs = _interopRequireDefault(require(\"qs\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * A Request object containing all the compiled information about this request.\n *\n * @property {string} host the host used for this API call\n * @property {number} port the port for this API call. Standard set to 443.\n * @property {boolean} ssl wether this API call uses SSL\n * @property {string} scheme the scheme inferred from the SSL state\n * @property {string} verb the HTTP method, for example `GET` or `POST`\n * @property {string} path the full path of the API endpoint\n * @property {Object} params the parameters to pass in the query or body\n * @property {string} queryPath the path and query string used for the API call\n * @property {string} bearerToken the authentication token\n * @property {string} clientVersion the version of the Amadeus library\n * @property {string} languageVersion the version of Node used\n * @property {string} appId the custom ID of the application using this library\n * @property {string} appVersion the custom version of the application\n *  using this library\n * @property {Object} headers the request headers\n *\n * @param {Object} options\n */\n\n\nvar Request = /*#__PURE__*/function () {\n  function Request(options) {\n    _classCallCheck(this, Request);\n\n    this.host = options.host;\n    this.port = options.port;\n    this.ssl = options.ssl;\n    this.scheme = this.ssl ? 'https' : 'http';\n    this.verb = options.verb;\n    this.path = options.path;\n    this.params = options.params;\n    this.queryPath = this.fullQueryPath();\n    this.bearerToken = options.bearerToken;\n    this.clientVersion = options.clientVersion;\n    this.languageVersion = options.languageVersion.replace('v', '');\n    this.appId = options.appId;\n    this.appVersion = options.appVersion;\n    this.headers = {\n      'User-Agent': this.userAgent(),\n      'Accept': 'application/json, application/vnd.amadeus+json'\n    };\n    this.addAuthorizationHeader();\n    this.addContentTypeHeader();\n  } // PROTECTED\n\n  /**\n   * Compiles the options for the HTTP request.\n   *\n   * Used by Client.execute when executing this request against the server.\n   *\n   * @return {Object} an associative array of options to be passed into the\n   *  Client.execute function\n   * @protected\n   */\n\n\n  _createClass(Request, [{\n    key: \"options\",\n    value: function options() {\n      var options = {\n        'host': this.host,\n        'port': this.port,\n        'protocol': \"\".concat(this.scheme, \":\"),\n        'path': this.queryPath,\n        'method': this.verb,\n        'headers': this.headers\n      };\n      return options;\n    }\n    /**\n     * Creats the body for the API cal, serializing the params if the verb is POST.\n     *\n     * @return {string} the serialized params\n     * @protected\n     */\n\n  }, {\n    key: \"body\",\n    value: function body() {\n      if (this.verb !== 'POST') {\n        return '';\n      } else {\n        if (!this.bearerToken) {\n          return _qs[\"default\"].stringify(this.params);\n        }\n\n        return this.params;\n      }\n    } // PRIVATE\n\n    /**\n     * Build up the custom User Agent\n     *\n     * @return {string} a user agent in the format \"library/version language/version app/version\"\n     * @private\n     */\n\n  }, {\n    key: \"userAgent\",\n    value: function userAgent() {\n      var userAgent = \"amadeus-node/\".concat(this.clientVersion, \" node/\").concat(this.languageVersion);\n\n      if (!this.appId) {\n        return userAgent;\n      }\n\n      return \"\".concat(userAgent, \" \").concat(this.appId, \"/\").concat(this.appVersion);\n    }\n    /**\n     * Build the full query path, combining the path with the query params if the\n     * verb is 'GET'. For example: '/foo/bar?baz=qux'\n     *\n     * @return {string} the path and params combined into one string.\n     * @private\n     */\n\n  }, {\n    key: \"fullQueryPath\",\n    value: function fullQueryPath() {\n      if (this.verb === 'POST') {\n        return this.path;\n      } else {\n        return \"\".concat(this.path, \"?\").concat(_qs[\"default\"].stringify(this.params));\n      }\n    }\n    /**\n     * Adds an Authorization header if the BearerToken is present\n     *\n     * @private\n     */\n\n  }, {\n    key: \"addAuthorizationHeader\",\n    value: function addAuthorizationHeader() {\n      if (!this.bearerToken) {\n        return;\n      }\n\n      this.headers['Authorization'] = \"Bearer \".concat(this.bearerToken);\n    }\n    /**\n     * Adds an Content-Type header if the HTTP method equals POST\n     *\n     * @private\n     */\n\n  }, {\n    key: \"addContentTypeHeader\",\n    value: function addContentTypeHeader() {\n      if (this.verb === 'POST' && !this.bearerToken) {\n        this.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      } else {\n        this.headers['Content-Type'] = 'application/vnd.amadeus+json';\n      }\n\n      return;\n    }\n  }]);\n\n  return Request;\n}();\n\nvar _default = Request;\nexports[\"default\"] = _default;\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["../../../src/amadeus/client/request.js"],"names":["Request","options","headers","qs","userAgent"],"mappings":"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","sourcesContent":["import qs from 'qs';\n\n/**\n * A Request object containing all the compiled information about this request.\n *\n * @property {string} host the host used for this API call\n * @property {number} port the port for this API call. Standard set to 443.\n * @property {boolean} ssl wether this API call uses SSL\n * @property {string} scheme the scheme inferred from the SSL state\n * @property {string} verb the HTTP method, for example `GET` or `POST`\n * @property {string} path the full path of the API endpoint\n * @property {Object} params the parameters to pass in the query or body\n * @property {string} queryPath the path and query string used for the API call\n * @property {string} bearerToken the authentication token\n * @property {string} clientVersion the version of the Amadeus library\n * @property {string} languageVersion the version of Node used\n * @property {string} appId the custom ID of the application using this library\n * @property {string} appVersion the custom version of the application\n *  using this library\n * @property {Object} headers the request headers\n *\n * @param {Object} options\n */\nclass Request {\n  constructor(options) {\n    this.host            = options.host;\n    this.port            = options.port;\n    this.ssl             = options.ssl;\n    this.scheme          = this.ssl ? 'https' : 'http';\n    this.verb            = options.verb;\n    this.path            = options.path;\n    this.params          = options.params;\n    this.queryPath       = this.fullQueryPath();\n    this.bearerToken     = options.bearerToken;\n    this.clientVersion   = options.clientVersion;\n    this.languageVersion = options.languageVersion.replace('v', '');\n    this.appId           = options.appId;\n    this.appVersion      = options.appVersion;\n    this.headers         = {\n      'User-Agent' : this.userAgent(),\n      'Accept' : 'application/json, application/vnd.amadeus+json'\n    };\n    this.addAuthorizationHeader();\n    this.addContentTypeHeader();\n  }\n\n  // PROTECTED\n\n  /**\n   * Compiles the options for the HTTP request.\n   *\n   * Used by Client.execute when executing this request against the server.\n   *\n   * @return {Object} an associative array of options to be passed into the\n   *  Client.execute function\n   * @protected\n   */\n  options() {\n    let options = {\n      'host' : this.host,\n      'port' : this.port,\n      'protocol' : `${this.scheme}:`,\n      'path' : this.queryPath,\n      'method' : this.verb,\n      'headers' : this.headers\n    };\n    return options;\n  }\n\n  /**\n   * Creats the body for the API cal, serializing the params if the verb is POST.\n   *\n   * @return {string} the serialized params\n   * @protected\n   */\n  body() {\n    if (this.verb !== 'POST') { return ''; }\n    else {\n      if (!this.bearerToken) {\n        return qs.stringify(this.params);\n      }\n      return this.params;\n    }\n  }\n\n  // PRIVATE\n\n  /**\n   * Build up the custom User Agent\n   *\n   * @return {string} a user agent in the format \"library/version language/version app/version\"\n   * @private\n   */\n  userAgent() {\n    let userAgent = `amadeus-node/${this.clientVersion} node/${this.languageVersion}`;\n    if (!this.appId) { return userAgent; }\n    return `${userAgent} ${this.appId}/${this.appVersion}`;\n  }\n\n  /**\n   * Build the full query path, combining the path with the query params if the\n   * verb is 'GET'. For example: '/foo/bar?baz=qux'\n   *\n   * @return {string} the path and params combined into one string.\n   * @private\n   */\n  fullQueryPath() {\n    if (this.verb === 'POST') { return this.path; }\n    else { return `${this.path}?${qs.stringify(this.params)}`; }\n  }\n\n  /**\n   * Adds an Authorization header if the BearerToken is present\n   *\n   * @private\n   */\n  addAuthorizationHeader() {\n    if (!this.bearerToken) { return; }\n    this.headers['Authorization'] = `Bearer ${this.bearerToken}`;\n  }\n\n  /**\n   * Adds an Content-Type header if the HTTP method equals POST\n   *\n   * @private\n   */\n  addContentTypeHeader() {\n    if (this.verb === 'POST' && !this.bearerToken) {\n      this.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n    } else {\n      this.headers['Content-Type'] = 'application/vnd.amadeus+json';\n    }\n    return;\n  }\n}\n\nexport default Request;\n"]},"metadata":{},"sourceType":"script"}