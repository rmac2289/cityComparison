{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar JSON_CONTENT_TYPES = ['application/json', 'application/vnd.amadeus+json'];\n/**\n * The response object returned for every API call.\n *\n * @param {Object} http_response the response object returned from the Node/HTTP\n *  request\n * @param {Request} request the request object used to make this API call\n *\n * @property {number} statusCode the HTTP status code for the response, if any\n * @property {string} body the raw body received from the API\n * @property {Object} result the parsed JSON received from the API\n * @property {Object} data the data attribute taken from the result\n * @property {boolean} parsed wether the raw body has been parsed into JSON\n * @property {Request} request the request object used to make this API call\n *\n */\n\nvar Response = /*#__PURE__*/function () {\n  function Response(http_response, request) {\n    _classCallCheck(this, Response);\n\n    var headers = http_response.headers || {};\n    this.contentType = headers['content-type'];\n    this.statusCode = http_response.statusCode;\n    this.request = request;\n    this.body = '';\n    this.result = null;\n    this.data = null;\n    this.parsed = false;\n  } // PROTECTED\n\n  /**\n   * Add a chunk received from the API to the body\n   *\n   * @param  {string} chunk a chunk of data\n   * @protected\n   */\n\n\n  _createClass(Response, [{\n    key: \"addChunk\",\n    value: function addChunk(chunk) {\n      this.body += chunk;\n    }\n    /**\n     * Tries to parse parse the raw data\n     * @protected\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      try {\n        if (this.isJson()) {\n          this.result = JSON.parse(this.body);\n          this.data = this.result.data;\n          this.parsed = true;\n        } else {\n          this.parsed = false;\n        }\n      } catch (SyntaxError) {\n        this.parsed = false;\n      }\n    }\n    /**\n     * Wether this API call can be considered a success. Used to wrap the response\n     * into a ResponseError\n     *\n     * @return {boolean}\n     * @protected\n     */\n\n  }, {\n    key: \"success\",\n    value: function success() {\n      return this.parsed && this.statusCode < 300;\n    } // PRIVATE\n\n    /**\n     * Tests if the content is seemingly JSON\n     *\n     * @return {boolean}\n     * @private\n     */\n\n  }, {\n    key: \"isJson\",\n    value: function isJson() {\n      return JSON_CONTENT_TYPES.indexOf(this.contentType) !== -1;\n    }\n  }]);\n\n  return Response;\n}();\n\nvar _default = Response;\nexports[\"default\"] = _default;\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["../../../src/amadeus/client/response.js"],"names":["JSON_CONTENT_TYPES","Response","headers","http_response","chunk","JSON"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,kBAAkB,GAAG,CAAA,kBAAA,EAAzB,8BAAyB,CAAzB;AAEA;;;;;;;;;;;;;;;;IAeMC,Q;AACJ,WAAA,QAAA,CAAA,aAAA,EAAA,OAAA,EAAoC;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA;;AAClC,QAAIC,OAAO,GAAGC,aAAa,CAAbA,OAAAA,IAAd,EAAA;AACA,SAAA,WAAA,GAAmBD,OAAO,CAA1B,cAA0B,CAA1B;AACA,SAAA,UAAA,GAAmBC,aAAa,CAAhC,UAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,IAAA,GAAA,EAAA;AACA,SAAA,MAAA,GAAA,IAAA;AACA,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,MAAA,GAAA,KAAA;IAGF;;AAEA;;;;;;;;;;6BAMSC,K,EAAO;AACd,WAAA,IAAA,IAAA,KAAA;AACD;AAGD;;;;;;;4BAIQ;AACN,UAAI;AACF,YAAI,KAAJ,MAAI,EAAJ,EAAmB;AACjB,eAAA,MAAA,GAAcC,IAAI,CAAJA,KAAAA,CAAW,KAAzB,IAAcA,CAAd;AACA,eAAA,IAAA,GAAY,KAAA,MAAA,CAAZ,IAAA;AACA,eAAA,MAAA,GAAA,IAAA;AAHF,SAAA,MAIO;AACL,eAAA,MAAA,GAAA,KAAA;AACD;AAPH,OAAA,CAQE,OAAA,WAAA,EAAoB;AACpB,aAAA,MAAA,GAAA,KAAA;AACD;AACF;AAED;;;;;;;;;;8BAOU;AACR,aAAQ,KAAA,MAAA,IAAe,KAAA,UAAA,GAAvB,GAAA;MAGF;;AAGA;;;;;;;;;6BAMS;AACP,aAAQL,kBAAkB,CAAlBA,OAAAA,CAA2B,KAA3BA,WAAAA,MAAiD,CAAzD,CAAA;AACD;;;;;;eAGYC,Q","sourcesContent":["let JSON_CONTENT_TYPES = ['application/json', 'application/vnd.amadeus+json'];\n\n/**\n * The response object returned for every API call.\n *\n * @param {Object} http_response the response object returned from the Node/HTTP\n *  request\n * @param {Request} request the request object used to make this API call\n *\n * @property {number} statusCode the HTTP status code for the response, if any\n * @property {string} body the raw body received from the API\n * @property {Object} result the parsed JSON received from the API\n * @property {Object} data the data attribute taken from the result\n * @property {boolean} parsed wether the raw body has been parsed into JSON\n * @property {Request} request the request object used to make this API call\n *\n */\nclass Response {\n  constructor(http_response, request) {\n    let headers = http_response.headers || {};\n    this.contentType = headers['content-type'];\n    this.statusCode  = http_response.statusCode;\n    this.request     = request;\n    this.body        = '';\n    this.result      = null;\n    this.data        = null;\n    this.parsed      = false;\n  }\n\n  // PROTECTED\n\n  /**\n   * Add a chunk received from the API to the body\n   *\n   * @param  {string} chunk a chunk of data\n   * @protected\n   */\n  addChunk(chunk) {\n    this.body += chunk;\n  }\n\n\n  /**\n   * Tries to parse parse the raw data\n   * @protected\n   */\n  parse() {\n    try {\n      if (this.isJson()) {\n        this.result = JSON.parse(this.body);\n        this.data = this.result.data;\n        this.parsed = true;\n      } else {\n        this.parsed = false;\n      }\n    } catch (SyntaxError) {\n      this.parsed = false;\n    }\n  }\n\n  /**\n   * Wether this API call can be considered a success. Used to wrap the response\n   * into a ResponseError\n   *\n   * @return {boolean}\n   * @protected\n   */\n  success() {\n    return (this.parsed && this.statusCode < 300);\n  }\n\n  // PRIVATE\n\n\n  /**\n   * Tests if the content is seemingly JSON\n   *\n   * @return {boolean}\n   * @private\n   */\n  isJson() {\n    return (JSON_CONTENT_TYPES.indexOf(this.contentType) !== -1);\n  }\n}\n\nexport default Response;\n"]},"metadata":{},"sourceType":"script"}