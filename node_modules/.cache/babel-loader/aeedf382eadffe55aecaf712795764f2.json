{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * A namespaced client for the\n * `/v1/travel/analytics/air-traffic/booked` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.travel.analytics.AirTraffic.Booked;\n * ```\n *\n * @param {Client} client\n */\n\n\nvar Booked = /*#__PURE__*/function () {\n  function Booked(client) {\n    _classCallCheck(this, Booked);\n\n    this.client = client;\n  }\n  /**\n   * Returns a list of air traffic reports based on the number of bookings.\n   *\n   * @param {Object} params\n   * @param {string} params.originCityCode IATA code of the origin city - e.g. MAD for\n   *   Madrid - required\n   * @param {string} params.period period when consumers are travelling in\n   *   YYYY-MM format\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Where were people flying to from Madrid in the August 2017?\n   *\n   * ```js\n   * amadeus.travel.analytics.AirTraffic.Booked.get({\n   *   originCityCode: 'MAD',\n   *   period: '2017-08'\n   * });\n   * ```\n   */\n\n\n  _createClass(Booked, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/travel/analytics/air-traffic/booked', params);\n    }\n  }]);\n\n  return Booked;\n}();\n\nvar _default = Booked;\nexports[\"default\"] = _default;\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["../../../../../../src/amadeus/namespaces/travel/analytics/air_traffic/booked.js"],"names":["Booked","params"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;IAaMA,M;AACJ,WAAA,MAAA,CAAA,MAAA,EAAoB;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,CAAA;;AAClB,SAAA,MAAA,GAAA,MAAA;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;0BAmBiB;AAAA,UAAbC,MAAa,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AACf,aAAO,KAAA,MAAA,CAAA,GAAA,CAAA,yCAAA,EAAP,MAAO,CAAP;AACD;;;;;;eAGYD,M","sourcesContent":["/**\n * A namespaced client for the\n * `/v1/travel/analytics/air-traffic/booked` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.travel.analytics.AirTraffic.Booked;\n * ```\n *\n * @param {Client} client\n */\nclass Booked{\n  constructor(client) {\n    this.client = client;\n  }\n\n  /**\n   * Returns a list of air traffic reports based on the number of bookings.\n   *\n   * @param {Object} params\n   * @param {string} params.originCityCode IATA code of the origin city - e.g. MAD for\n   *   Madrid - required\n   * @param {string} params.period period when consumers are travelling in\n   *   YYYY-MM format\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Where were people flying to from Madrid in the August 2017?\n   *\n   * ```js\n   * amadeus.travel.analytics.AirTraffic.Booked.get({\n   *   originCityCode: 'MAD',\n   *   period: '2017-08'\n   * });\n   * ```\n   */\n  get(params = {}) {\n    return this.client.get('/v1/travel/analytics/air-traffic/booked', params);\n  }\n}\n\nexport default Booked;\n"]},"metadata":{},"sourceType":"script"}